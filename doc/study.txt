SpringBoot远程调试（address 是开启远程端口，本地通过监听这个端口来实现远程调试）
1.java -jar -Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=9090 xxx.jar


------------------------------------------
idea连接docker：
1.修改docker.service,开启2375端口;
vim /usr/lib/systemd/system/docker.service

2.ExecStart末尾增加 ：按"i"插入，按"Esc"退出，输入":wq" 完成文件写入;
# 允许所有客户端连接
-H tcp://0.0.0.0:2375 -H unix://var/run/docker.sock

3.重新加载配置文件和重启Docker：
systemctl daemon-reload 
systemctl restart docker 

4.防火墙开放2375端口号
firewall-cmd --zone=public --add-port=2375/tcp --permanent

5.重启防火墙
firewall-cmd --reload

------------------------------------------
docker修改镜像拉取地址为国内地址：
1.vim /etc/docker/daemon.json

格式：
{
"registry-mirrors": [
"https://kfwkfulq.mirror.aliyuncs.com",
"https://2lqq34jg.mirror.aliyuncs.com",
"https://pee6w651.mirror.aliyuncs.com",
"https://registry.docker-cn.com",
"http://hub-mirror.c.163.com"
],
"dns": ["8.8.8.8","8.8.4.4"]
}

具体地址：
#https://registry.docker-cn.com
#http://hub-mirror.c.163.com
#https://3laho3y3.mirror.aliyuncs.com
#http://f1361db2.m.daocloud.io
#https://mirror.ccs.tencentyun.com

2.重新加载配置文件和重启Docker：
systemctl daemon-reload 
systemctl restart docker


------------------------------------------
docker安装并持久化pg数据库 
1.docker search postgres

2.docker pull postgres:9.6

3.创建本地卷
docker volume create pgdata

4.启动容器：启动时，需要将刚上个步骤创建的卷 pgdata 挂载到容器的 /var/lib/postgresql/data 目录
docker run --name 服务名 -e POSTGRES_PASSWORD=password -p 5432:5432 -v pgdata:/var/lib/postgresql/data -d 镜像ID


------------------------------------------
docker的一些命令：
---重启docker
systemctl daemon-reload
systemctl restart docker

---查看docker是否运行成功
ps -ef |grep docker

---docker查看本地镜像
dicker image ls

---docker进入容器
docker exec -it 镜像名 /bin/bash

---退出容器
exit


linux搭建kafka+rabbitmq
1.解压jdk的压缩包
tar -zxvf jdk-8u171-linux-x64.tar.gz

将其移到/user/java 目录下

2.修改环境变量
vi /etc/profile 

JAVA_HOME=/usr/java/jdk1.8.0_171

export JRE_HOME=/usr/java/jdk1.8.0_171/jre 

export CLASSPATH=$JAVA_HOME/lib:$JRE_HOME/lib:$CLASSPATH 

export PATH=$JAVA_HOME/bin:$JRE_HOME/bin:$PATH

3.使配置生效
source /etc/profile
 
4.查看java版本
java -version

------------------------------------------
docker搭建mysql 本地做磁盘挂载
# docker从仓库中拉取最新版的mysql镜像，如果没加标签的话，默认获取最新的版本latest
1.docker pull mysql

# 运行mysql命名容器名称为mysql-service并且设置root账号初始密码为root
2.docker run -d -p 3306:3306 --name mysql-service -e MYSQL_ROOT_PASSWORD="root" mysql

3.docker exec -it mysql-service bash

# 查找Docker内，MySQL配置文件my.cnf的位置
4.mysql --help | grep my.cnf	

5.创建本地文件夹（创建本地路径并挂载Docker内数据）
mkdir -p /root/docker/mysql/conf && mkdir -p /root/docker/mysql/data

6.将测试容器里 MySQL 的配置文件复制到该路径。日后需改配置，直接在挂载路径的配置文件上修改即可　　
docker cp mysql-service:/etc/mysql/my.cnf /root/docker/mysql/conf

7.创建 MySQL 容器并启动
docker run --name mysql-server \
-p 3306:3306 -e MYSQL_ROOT_PASSWORD=root \
--mount type=bind,src=/root/docker/mysql/conf/my.cnf,dst=/etc/mysql/my.cnf \
--mount type=bind,src=/root/docker/mysql/data,dst=/var/lib/mysql \
--restart=on-failure:3 \
-d mysql

--name：为容器指定一个名字
-p：指定端口映射，格式为：主机(宿主)端口:容器端口
-e：username="xxx"，设置环境变量
--restart=on-failure:3：是指容器在未来出现异常退出（退出码非0）的情况下循环重启3次
-mount：绑定挂载
-d：后台运行容器，并返回容器 id

#登录mysql（进入容器之后）
mysql -uroot -p

#查看mysql字符集命令
show variables like '%char%';

修改配置
[mysqld]
user=mysql
character-set-server=utf8
[client]
default-character-set=utf8
[mysql]
default-character-set=utf8

8.重启
docker restart mysql-server

【注】进入容器之后），修改允许访问的用户IP及其密码 
ALTER USER 'root'@'%' IDENTIFIED WITH mysql_native_password BY 'root';
 ps:host为%表示不限制ip，如果为localhost则表示本机使用


------------------------------------------
docker搭建rabbitmq（managemnent 包含web页面）
1.
docker pull rabbitmq:3.7.7-management

2.
docker run --name rabbitmq3.7.7 -p 5672:5672 -p 15672:15672 -v `pwd`/data:/var/lib/rabbitmq --hostname myRabbit -e RABBITMQ_DEFAULT_VHOST=my_vhost  -e RABBITMQ_DEFAULT_USER=admin -e RABBITMQ_DEFAULT_PASS=admin -d 镜像ID

-d 后台运行容器；

--name 指定容器名；

-p 指定服务运行的端口（5672：应用访问端口；15672：控制台Web端口号）；

-v 映射目录或文件；

--hostname  主机名（RabbitMQ的一个重要注意事项是它根据所谓的 “节点名称” 存储数据，默认为主机名）；

-e 指定环境变量；（RABBITMQ_DEFAULT_VHOST：默认虚拟机名；RABBITMQ_DEFAULT_USER：默认的用户名；RABBITMQ_DEFAULT_PASS：默认用户名的密码）

------------------------------------------
docker启动redis
创建配置目录和数据目录  mkdir -p /root/docker/redis/conf  mkdir -p /root/docker/redis/data
docker run -d --privileged=true -p 6379:6379 --restart always -v /root/docker/redis/conf/redis.conf:/etc/redis/redis.conf -v /root/docker/redis/data:/data --name myredis redis redis-server /etc/redis/redis.conf --appendonly yes

-d                                                  -> 以守护进程的方式启动容器
-p 6379:6379                                        -> 绑定宿主机端口
--name myredis                                      -> 指定容器名称
--restart always                                    -> 开机启动
--privileged=true                                   -> 提升容器内权限
-v /root/docker/redis/conf:/etc/redis/redis.conf    -> 映射配置文件
-v /root/docker/redis/data:/data                    -> 映射数据目录
--appendonly yes                                    -> 开启数据持久化


------------------------------------------
启动consul
docker run -d --restart=always -p 8500:8500 -v /data/consul:/consul/data -e CONSUL_BIND_INTERFACE='eth0' --name=consul-server consul agent -server -bootstrap -ui -client='0.0.0.0'

agent: 表示启动 agent 进程
server: 表示 consul 为 server 模式
client: 表示 consul 为 client 模式
bootstrap: 表示这个节点是 Server-Leader
--restart=always:Docker 重启时,容器自动启动，如开始未指定，可以使用命令:
docker container update --restart=always 容器名字,进行修改。
ui: 启动 Web UI, 默认端口 8500
node: 指定节点名称, 集群中节点名称唯一
client: 绑定客户端接口地址, 0.0.0.0 表示所有地址都可以访问
–net=host docker参数, 使得docker容器越过了netnamespace的隔离，免去手动指定端口映射的步骤
-server consul支持以server或client的模式运行, server是服务发现模块的核心, client主要用于转发请求
-advertise 将本机私有IP传递到consul
-bootstrap-expect 指定consul将等待几个节点连通，成为一个完整的集群
-retry-join 指定要加入的consul节点地址，失败会重试, 可多次指定不同的地址
-client consul绑定在哪个client地址上，这个地址提供HTTP、DNS、RPC等服务，默认是127.0.0.1
-bind 该地址用来在集群内部的通讯，集群内的所有节点到地址都必须是可达的，默认是0.0.0.0
-allow_stale 设置为true, 表明可以从consul集群的任一server节点获取dns信息, false则表明每次请求都会经过consul server leader
--name DOCKER容器的名称
-client 0.0.0.0 表示任何地址可以访问。
